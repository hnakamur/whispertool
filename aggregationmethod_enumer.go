// Code generated by "enumer -type AggregationMethod -transform=snake"; DO NOT EDIT.

//
package whispertool

import (
	"fmt"
)

const _AggregationMethodName = "averagesumlastmaxminfirstmixpercentile"

var _AggregationMethodIndex = [...]uint8{0, 7, 10, 14, 17, 20, 25, 28, 38}

func (i AggregationMethod) String() string {
	i -= 1
	if i < 0 || i >= AggregationMethod(len(_AggregationMethodIndex)-1) {
		return fmt.Sprintf("AggregationMethod(%d)", i+1)
	}
	return _AggregationMethodName[_AggregationMethodIndex[i]:_AggregationMethodIndex[i+1]]
}

var _AggregationMethodValues = []AggregationMethod{1, 2, 3, 4, 5, 6, 7, 8}

var _AggregationMethodNameToValueMap = map[string]AggregationMethod{
	_AggregationMethodName[0:7]:   1,
	_AggregationMethodName[7:10]:  2,
	_AggregationMethodName[10:14]: 3,
	_AggregationMethodName[14:17]: 4,
	_AggregationMethodName[17:20]: 5,
	_AggregationMethodName[20:25]: 6,
	_AggregationMethodName[25:28]: 7,
	_AggregationMethodName[28:38]: 8,
}

// AggregationMethodString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AggregationMethodString(s string) (AggregationMethod, error) {
	if val, ok := _AggregationMethodNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AggregationMethod values", s)
}

// AggregationMethodValues returns all values of the enum
func AggregationMethodValues() []AggregationMethod {
	return _AggregationMethodValues
}

// IsAAggregationMethod returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AggregationMethod) IsAAggregationMethod() bool {
	for _, v := range _AggregationMethodValues {
		if i == v {
			return true
		}
	}
	return false
}
